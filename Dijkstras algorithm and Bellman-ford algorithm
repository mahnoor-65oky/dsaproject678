#include <iostream>
#include <vector>
#include <queue>
#include <limits>
#include <fstream>

using namespace std;

// Data structure to represent a weighted edge
struct Edge {
 int destination, weight;
};

// Data structure to represent a graph
class Graph {
 int numVertices;
 vector<vector<Edge>> adjList;

public:
 Graph(int numVertices) {
  this->numVertices = numVertices;
  adjList.resize(numVertices);
 }

 // Function to add an edge to the graph
 void addEdge(int source, int destination, int weight) {
  Edge edge;
  edge.destination = destination;
  edge.weight = weight;
  adjList[source].push_back(edge);
 }

 // Function to implement Dijkstra's algorithm
 vector<int> dijkstra(int source) {
  vector<int> distances(numVertices, numeric_limits<int>::max());
  distances[source] = 0;
  priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
  pq.push(make_pair(0, source));
  while (!pq.empty()) {
   int u = pq.top().second;
   pq.pop();
   for (Edge edge : adjList[u]) {
    int v = edge.destination;
    int weight = edge.weight;
    if (distances[u] + weight < distances[v]) {
     distances[v] = distances[u] + weight;
     pq.push(make_pair(distances[v], v));
    }
   }
  }
  return distances;
 }

 // Function to implement Bellman-Ford algorithm
 vector<int> bellmanFord(int source) {
  vector<int> distances(numVertices, numeric_limits<int>::max());
  distances[source] = 0;
  for (int i = 0; i < numVertices - 1; i++) {
   for (int u = 0; u < numVertices; u++) {
    for (Edge edge : adjList[u]) {
     int v = edge.destination;
     int weight = edge.weight;
     if (distances[u] + weight < distances[v]) {
      distances[v] = distances[u] + weight;
     }
    }
   }
  }
  return distances;
 }
};

int main() {
 // Create a graph given in the above diagram
 Graph graph(6);
 graph.addEdge(0, 1, 2);
 graph.addEdge(0, 2, 4);
 graph.addEdge(1, 2, 1);
 graph.addEdge(1, 3, 2);
 graph.addEdge(2, 3, 3);
 graph.addEdge(3, 4, 2);
 graph.addEdge(3, 5, 1);
 graph.addEdge(4, 5, 1);

 // Find shortest path from source node 0 to all other nodes
 vector<int> dijkstraDistances = graph.dijkstra(0);
 vector<int> bellmanFordDistances = graph.bellmanFord(0);

 cout << "Shortest distances from source node 0 (Dijkstra's):" << endl;
 for (int i = 0; i < dijkstraDistances.size(); i++) {
  cout << "Node " << i << ": " << dijkstraDistances[i] << endl;
 }

 cout << "\nShortest distances from source node 0 (Bellman-Ford):" << endl;
 for (int i = 0; i < bellmanFordDistances.size(); i++) {
  cout << "Node " << i << ": " << bellmanFordDistances[i] << endl;
 }

 return 0;
}
